/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 *
 * Jellyfin API
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BackupManifestDto } from '../models';
// @ts-ignore
import type { BackupOptionsDto } from '../models';
// @ts-ignore
import type { BackupRestoreRequestDto } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
/**
 * BackupApi - axios parameter creator
 * @export
 */
export const BackupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Backup.
         * @param {BackupOptionsDto} [backupOptionsDto] The backup options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackup: async (backupOptionsDto?: BackupOptionsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Backup/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(backupOptionsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the descriptor from an existing archive is present.
         * @param {string} path The data to start a restore process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackup: async (path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('getBackup', 'path', path)
            const localVarPath = `/Backup/Manifest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of all currently present backups in the backup directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBackups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restores to a backup by restarting the server and applying the backup.
         * @param {BackupRestoreRequestDto} backupRestoreRequestDto The data to start a restore process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRestoreBackup: async (backupRestoreRequestDto: BackupRestoreRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backupRestoreRequestDto' is not null or undefined
            assertParamExists('startRestoreBackup', 'backupRestoreRequestDto', backupRestoreRequestDto)
            const localVarPath = `/Backup/Restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(backupRestoreRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackupApi - functional programming interface
 * @export
 */
export const BackupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Backup.
         * @param {BackupOptionsDto} [backupOptionsDto] The backup options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBackup(backupOptionsDto?: BackupOptionsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupManifestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBackup(backupOptionsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.createBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets the descriptor from an existing archive is present.
         * @param {string} path The data to start a restore process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBackup(path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupManifestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBackup(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.getBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a list of all currently present backups in the backup directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBackups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BackupManifestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBackups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.listBackups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restores to a backup by restarting the server and applying the backup.
         * @param {BackupRestoreRequestDto} backupRestoreRequestDto The data to start a restore process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startRestoreBackup(backupRestoreRequestDto: BackupRestoreRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startRestoreBackup(backupRestoreRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.startRestoreBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackupApi - factory interface
 * @export
 */
export const BackupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackupApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Backup.
         * @param {BackupApiCreateBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackup(requestParameters: BackupApiCreateBackupRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BackupManifestDto> {
            return localVarFp.createBackup(requestParameters.backupOptionsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the descriptor from an existing archive is present.
         * @param {BackupApiGetBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackup(requestParameters: BackupApiGetBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<BackupManifestDto> {
            return localVarFp.getBackup(requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of all currently present backups in the backup directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBackups(options?: RawAxiosRequestConfig): AxiosPromise<Array<BackupManifestDto>> {
            return localVarFp.listBackups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restores to a backup by restarting the server and applying the backup.
         * @param {BackupApiStartRestoreBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRestoreBackup(requestParameters: BackupApiStartRestoreBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startRestoreBackup(requestParameters.backupRestoreRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBackup operation in BackupApi.
 * @export
 * @interface BackupApiCreateBackupRequest
 */
export interface BackupApiCreateBackupRequest {
    /**
     * The backup options.
     * @type {BackupOptionsDto}
     * @memberof BackupApiCreateBackup
     */
    readonly backupOptionsDto?: BackupOptionsDto
}

/**
 * Request parameters for getBackup operation in BackupApi.
 * @export
 * @interface BackupApiGetBackupRequest
 */
export interface BackupApiGetBackupRequest {
    /**
     * The data to start a restore process.
     * @type {string}
     * @memberof BackupApiGetBackup
     */
    readonly path: string
}

/**
 * Request parameters for startRestoreBackup operation in BackupApi.
 * @export
 * @interface BackupApiStartRestoreBackupRequest
 */
export interface BackupApiStartRestoreBackupRequest {
    /**
     * The data to start a restore process.
     * @type {BackupRestoreRequestDto}
     * @memberof BackupApiStartRestoreBackup
     */
    readonly backupRestoreRequestDto: BackupRestoreRequestDto
}

/**
 * BackupApi - object-oriented interface
 * @export
 * @class BackupApi
 * @extends {BaseAPI}
 */
export class BackupApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Backup.
     * @param {BackupApiCreateBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public createBackup(requestParameters: BackupApiCreateBackupRequest = {}, options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).createBackup(requestParameters.backupOptionsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the descriptor from an existing archive is present.
     * @param {BackupApiGetBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public getBackup(requestParameters: BackupApiGetBackupRequest, options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).getBackup(requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of all currently present backups in the backup directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public listBackups(options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).listBackups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restores to a backup by restarting the server and applying the backup.
     * @param {BackupApiStartRestoreBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public startRestoreBackup(requestParameters: BackupApiStartRestoreBackupRequest, options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).startRestoreBackup(requestParameters.backupRestoreRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

