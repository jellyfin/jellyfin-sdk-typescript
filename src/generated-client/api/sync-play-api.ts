/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 *
 * Jellyfin API
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BufferRequestDto } from '../models';
// @ts-ignore
import type { GroupInfoDto } from '../models';
// @ts-ignore
import type { IgnoreWaitRequestDto } from '../models';
// @ts-ignore
import type { JoinGroupRequestDto } from '../models';
// @ts-ignore
import type { MovePlaylistItemRequestDto } from '../models';
// @ts-ignore
import type { NewGroupRequestDto } from '../models';
// @ts-ignore
import type { NextItemRequestDto } from '../models';
// @ts-ignore
import type { PingRequestDto } from '../models';
// @ts-ignore
import type { PlayRequestDto } from '../models';
// @ts-ignore
import type { PreviousItemRequestDto } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
// @ts-ignore
import type { QueueRequestDto } from '../models';
// @ts-ignore
import type { ReadyRequestDto } from '../models';
// @ts-ignore
import type { RemoveFromPlaylistRequestDto } from '../models';
// @ts-ignore
import type { SeekRequestDto } from '../models';
// @ts-ignore
import type { SetPlaylistItemRequestDto } from '../models';
// @ts-ignore
import type { SetRepeatModeRequestDto } from '../models';
// @ts-ignore
import type { SetShuffleModeRequestDto } from '../models';
/**
 * SyncPlayApi - axios parameter creator
 * @export
 */
export const SyncPlayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {BufferRequestDto} bufferRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering: async (bufferRequestDto: BufferRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bufferRequestDto' is not null or undefined
            assertParamExists('syncPlayBuffering', 'bufferRequestDto', bufferRequestDto)
            const localVarPath = `/SyncPlay/Buffering`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bufferRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {NewGroupRequestDto} newGroupRequestDto The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup: async (newGroupRequestDto: NewGroupRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newGroupRequestDto' is not null or undefined
            assertParamExists('syncPlayCreateGroup', 'newGroupRequestDto', newGroupRequestDto)
            const localVarPath = `/SyncPlay/New`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newGroupRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a SyncPlay group by id.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('syncPlayGetGroup', 'id', id)
            const localVarPath = `/SyncPlay/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {JoinGroupRequestDto} joinGroupRequestDto The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup: async (joinGroupRequestDto: JoinGroupRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinGroupRequestDto' is not null or undefined
            assertParamExists('syncPlayJoinGroup', 'joinGroupRequestDto', joinGroupRequestDto)
            const localVarPath = `/SyncPlay/Join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinGroupRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem: async (movePlaylistItemRequestDto: MovePlaylistItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'movePlaylistItemRequestDto' is not null or undefined
            assertParamExists('syncPlayMovePlaylistItem', 'movePlaylistItemRequestDto', movePlaylistItemRequestDto)
            const localVarPath = `/SyncPlay/MovePlaylistItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(movePlaylistItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {NextItemRequestDto} nextItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem: async (nextItemRequestDto: NextItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nextItemRequestDto' is not null or undefined
            assertParamExists('syncPlayNextItem', 'nextItemRequestDto', nextItemRequestDto)
            const localVarPath = `/SyncPlay/NextItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nextItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update session ping.
         * @param {PingRequestDto} pingRequestDto The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing: async (pingRequestDto: PingRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pingRequestDto' is not null or undefined
            assertParamExists('syncPlayPing', 'pingRequestDto', pingRequestDto)
            const localVarPath = `/SyncPlay/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pingRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {PreviousItemRequestDto} previousItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem: async (previousItemRequestDto: PreviousItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'previousItemRequestDto' is not null or undefined
            assertParamExists('syncPlayPreviousItem', 'previousItemRequestDto', previousItemRequestDto)
            const localVarPath = `/SyncPlay/PreviousItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(previousItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {QueueRequestDto} queueRequestDto The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue: async (queueRequestDto: QueueRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueRequestDto' is not null or undefined
            assertParamExists('syncPlayQueue', 'queueRequestDto', queueRequestDto)
            const localVarPath = `/SyncPlay/Queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queueRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {ReadyRequestDto} readyRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady: async (readyRequestDto: ReadyRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'readyRequestDto' is not null or undefined
            assertParamExists('syncPlayReady', 'readyRequestDto', readyRequestDto)
            const localVarPath = `/SyncPlay/Ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(readyRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist: async (removeFromPlaylistRequestDto: RemoveFromPlaylistRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeFromPlaylistRequestDto' is not null or undefined
            assertParamExists('syncPlayRemoveFromPlaylist', 'removeFromPlaylistRequestDto', removeFromPlaylistRequestDto)
            const localVarPath = `/SyncPlay/RemoveFromPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeFromPlaylistRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {SeekRequestDto} seekRequestDto The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek: async (seekRequestDto: SeekRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seekRequestDto' is not null or undefined
            assertParamExists('syncPlaySeek', 'seekRequestDto', seekRequestDto)
            const localVarPath = `/SyncPlay/Seek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seekRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait: async (ignoreWaitRequestDto: IgnoreWaitRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ignoreWaitRequestDto' is not null or undefined
            assertParamExists('syncPlaySetIgnoreWait', 'ignoreWaitRequestDto', ignoreWaitRequestDto)
            const localVarPath = `/SyncPlay/SetIgnoreWait`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ignoreWaitRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {PlayRequestDto} playRequestDto The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue: async (playRequestDto: PlayRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playRequestDto' is not null or undefined
            assertParamExists('syncPlaySetNewQueue', 'playRequestDto', playRequestDto)
            const localVarPath = `/SyncPlay/SetNewQueue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem: async (setPlaylistItemRequestDto: SetPlaylistItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setPlaylistItemRequestDto' is not null or undefined
            assertParamExists('syncPlaySetPlaylistItem', 'setPlaylistItemRequestDto', setPlaylistItemRequestDto)
            const localVarPath = `/SyncPlay/SetPlaylistItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setPlaylistItemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode: async (setRepeatModeRequestDto: SetRepeatModeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRepeatModeRequestDto' is not null or undefined
            assertParamExists('syncPlaySetRepeatMode', 'setRepeatModeRequestDto', setRepeatModeRequestDto)
            const localVarPath = `/SyncPlay/SetRepeatMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setRepeatModeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode: async (setShuffleModeRequestDto: SetShuffleModeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setShuffleModeRequestDto' is not null or undefined
            assertParamExists('syncPlaySetShuffleMode', 'setShuffleModeRequestDto', setShuffleModeRequestDto)
            const localVarPath = `/SyncPlay/SetShuffleMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setShuffleModeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Unpause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncPlayApi - functional programming interface
 * @export
 */
export const SyncPlayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncPlayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {BufferRequestDto} bufferRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayBuffering(bufferRequestDto: BufferRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayBuffering(bufferRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayBuffering']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {NewGroupRequestDto} newGroupRequestDto The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayCreateGroup(newGroupRequestDto: NewGroupRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayCreateGroup(newGroupRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayCreateGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a SyncPlay group by id.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayGetGroup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayGetGroup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayGetGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayGetGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayGetGroups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayGetGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {JoinGroupRequestDto} joinGroupRequestDto The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayJoinGroup(joinGroupRequestDto: JoinGroupRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayJoinGroup(joinGroupRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayJoinGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayLeaveGroup(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayLeaveGroup(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayLeaveGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayMovePlaylistItem(movePlaylistItemRequestDto: MovePlaylistItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayMovePlaylistItem(movePlaylistItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayMovePlaylistItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {NextItemRequestDto} nextItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayNextItem(nextItemRequestDto: NextItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayNextItem(nextItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayNextItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPause(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPause(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayPause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update session ping.
         * @param {PingRequestDto} pingRequestDto The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPing(pingRequestDto: PingRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPing(pingRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayPing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {PreviousItemRequestDto} previousItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPreviousItem(previousItemRequestDto: PreviousItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPreviousItem(previousItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayPreviousItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {QueueRequestDto} queueRequestDto The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayQueue(queueRequestDto: QueueRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayQueue(queueRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayQueue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {ReadyRequestDto} readyRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayReady(readyRequestDto: ReadyRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayReady(readyRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayReady']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto: RemoveFromPlaylistRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayRemoveFromPlaylist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {SeekRequestDto} seekRequestDto The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySeek(seekRequestDto: SeekRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySeek(seekRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySeek']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetIgnoreWait(ignoreWaitRequestDto: IgnoreWaitRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetIgnoreWait(ignoreWaitRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySetIgnoreWait']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {PlayRequestDto} playRequestDto The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetNewQueue(playRequestDto: PlayRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetNewQueue(playRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySetNewQueue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetPlaylistItem(setPlaylistItemRequestDto: SetPlaylistItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetPlaylistItem(setPlaylistItemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySetPlaylistItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetRepeatMode(setRepeatModeRequestDto: SetRepeatModeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetRepeatMode(setRepeatModeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySetRepeatMode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetShuffleMode(setShuffleModeRequestDto: SetShuffleModeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetShuffleMode(setShuffleModeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlaySetShuffleMode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayStop(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayStop(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayStop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayUnpause(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayUnpause(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncPlayApi.syncPlayUnpause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncPlayApi - factory interface
 * @export
 */
export const SyncPlayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncPlayApiFp(configuration)
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {SyncPlayApiSyncPlayBufferingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering(requestParameters: SyncPlayApiSyncPlayBufferingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayBuffering(requestParameters.bufferRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {SyncPlayApiSyncPlayCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup(requestParameters: SyncPlayApiSyncPlayCreateGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupInfoDto> {
            return localVarFp.syncPlayCreateGroup(requestParameters.newGroupRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a SyncPlay group by id.
         * @param {SyncPlayApiSyncPlayGetGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroup(requestParameters: SyncPlayApiSyncPlayGetGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupInfoDto> {
            return localVarFp.syncPlayGetGroup(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups(options?: RawAxiosRequestConfig): AxiosPromise<Array<GroupInfoDto>> {
            return localVarFp.syncPlayGetGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {SyncPlayApiSyncPlayJoinGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup(requestParameters: SyncPlayApiSyncPlayJoinGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayJoinGroup(requestParameters.joinGroupRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayLeaveGroup(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {SyncPlayApiSyncPlayMovePlaylistItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem(requestParameters: SyncPlayApiSyncPlayMovePlaylistItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayMovePlaylistItem(requestParameters.movePlaylistItemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {SyncPlayApiSyncPlayNextItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem(requestParameters: SyncPlayApiSyncPlayNextItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayNextItem(requestParameters.nextItemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayPause(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update session ping.
         * @param {SyncPlayApiSyncPlayPingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing(requestParameters: SyncPlayApiSyncPlayPingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayPing(requestParameters.pingRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {SyncPlayApiSyncPlayPreviousItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem(requestParameters: SyncPlayApiSyncPlayPreviousItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayPreviousItem(requestParameters.previousItemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {SyncPlayApiSyncPlayQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue(requestParameters: SyncPlayApiSyncPlayQueueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayQueue(requestParameters.queueRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {SyncPlayApiSyncPlayReadyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady(requestParameters: SyncPlayApiSyncPlayReadyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayReady(requestParameters.readyRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {SyncPlayApiSyncPlayRemoveFromPlaylistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist(requestParameters: SyncPlayApiSyncPlayRemoveFromPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayRemoveFromPlaylist(requestParameters.removeFromPlaylistRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {SyncPlayApiSyncPlaySeekRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek(requestParameters: SyncPlayApiSyncPlaySeekRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySeek(requestParameters.seekRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {SyncPlayApiSyncPlaySetIgnoreWaitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait(requestParameters: SyncPlayApiSyncPlaySetIgnoreWaitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySetIgnoreWait(requestParameters.ignoreWaitRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {SyncPlayApiSyncPlaySetNewQueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue(requestParameters: SyncPlayApiSyncPlaySetNewQueueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySetNewQueue(requestParameters.playRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SyncPlayApiSyncPlaySetPlaylistItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem(requestParameters: SyncPlayApiSyncPlaySetPlaylistItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySetPlaylistItem(requestParameters.setPlaylistItemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SyncPlayApiSyncPlaySetRepeatModeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode(requestParameters: SyncPlayApiSyncPlaySetRepeatModeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySetRepeatMode(requestParameters.setRepeatModeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SyncPlayApiSyncPlaySetShuffleModeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode(requestParameters: SyncPlayApiSyncPlaySetShuffleModeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlaySetShuffleMode(requestParameters.setShuffleModeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayStop(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncPlayUnpause(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for syncPlayBuffering operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayBufferingRequest
 */
export interface SyncPlayApiSyncPlayBufferingRequest {
    /**
     * The player status.
     * @type {BufferRequestDto}
     * @memberof SyncPlayApiSyncPlayBuffering
     */
    readonly bufferRequestDto: BufferRequestDto
}

/**
 * Request parameters for syncPlayCreateGroup operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayCreateGroupRequest
 */
export interface SyncPlayApiSyncPlayCreateGroupRequest {
    /**
     * The settings of the new group.
     * @type {NewGroupRequestDto}
     * @memberof SyncPlayApiSyncPlayCreateGroup
     */
    readonly newGroupRequestDto: NewGroupRequestDto
}

/**
 * Request parameters for syncPlayGetGroup operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayGetGroupRequest
 */
export interface SyncPlayApiSyncPlayGetGroupRequest {
    /**
     * The id of the group.
     * @type {string}
     * @memberof SyncPlayApiSyncPlayGetGroup
     */
    readonly id: string
}

/**
 * Request parameters for syncPlayJoinGroup operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayJoinGroupRequest
 */
export interface SyncPlayApiSyncPlayJoinGroupRequest {
    /**
     * The group to join.
     * @type {JoinGroupRequestDto}
     * @memberof SyncPlayApiSyncPlayJoinGroup
     */
    readonly joinGroupRequestDto: JoinGroupRequestDto
}

/**
 * Request parameters for syncPlayMovePlaylistItem operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayMovePlaylistItemRequest
 */
export interface SyncPlayApiSyncPlayMovePlaylistItemRequest {
    /**
     * The new position for the item.
     * @type {MovePlaylistItemRequestDto}
     * @memberof SyncPlayApiSyncPlayMovePlaylistItem
     */
    readonly movePlaylistItemRequestDto: MovePlaylistItemRequestDto
}

/**
 * Request parameters for syncPlayNextItem operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayNextItemRequest
 */
export interface SyncPlayApiSyncPlayNextItemRequest {
    /**
     * The current item information.
     * @type {NextItemRequestDto}
     * @memberof SyncPlayApiSyncPlayNextItem
     */
    readonly nextItemRequestDto: NextItemRequestDto
}

/**
 * Request parameters for syncPlayPing operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayPingRequest
 */
export interface SyncPlayApiSyncPlayPingRequest {
    /**
     * The new ping.
     * @type {PingRequestDto}
     * @memberof SyncPlayApiSyncPlayPing
     */
    readonly pingRequestDto: PingRequestDto
}

/**
 * Request parameters for syncPlayPreviousItem operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayPreviousItemRequest
 */
export interface SyncPlayApiSyncPlayPreviousItemRequest {
    /**
     * The current item information.
     * @type {PreviousItemRequestDto}
     * @memberof SyncPlayApiSyncPlayPreviousItem
     */
    readonly previousItemRequestDto: PreviousItemRequestDto
}

/**
 * Request parameters for syncPlayQueue operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayQueueRequest
 */
export interface SyncPlayApiSyncPlayQueueRequest {
    /**
     * The items to add.
     * @type {QueueRequestDto}
     * @memberof SyncPlayApiSyncPlayQueue
     */
    readonly queueRequestDto: QueueRequestDto
}

/**
 * Request parameters for syncPlayReady operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayReadyRequest
 */
export interface SyncPlayApiSyncPlayReadyRequest {
    /**
     * The player status.
     * @type {ReadyRequestDto}
     * @memberof SyncPlayApiSyncPlayReady
     */
    readonly readyRequestDto: ReadyRequestDto
}

/**
 * Request parameters for syncPlayRemoveFromPlaylist operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlayRemoveFromPlaylistRequest
 */
export interface SyncPlayApiSyncPlayRemoveFromPlaylistRequest {
    /**
     * The items to remove.
     * @type {RemoveFromPlaylistRequestDto}
     * @memberof SyncPlayApiSyncPlayRemoveFromPlaylist
     */
    readonly removeFromPlaylistRequestDto: RemoveFromPlaylistRequestDto
}

/**
 * Request parameters for syncPlaySeek operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySeekRequest
 */
export interface SyncPlayApiSyncPlaySeekRequest {
    /**
     * The new playback position.
     * @type {SeekRequestDto}
     * @memberof SyncPlayApiSyncPlaySeek
     */
    readonly seekRequestDto: SeekRequestDto
}

/**
 * Request parameters for syncPlaySetIgnoreWait operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySetIgnoreWaitRequest
 */
export interface SyncPlayApiSyncPlaySetIgnoreWaitRequest {
    /**
     * The settings to set.
     * @type {IgnoreWaitRequestDto}
     * @memberof SyncPlayApiSyncPlaySetIgnoreWait
     */
    readonly ignoreWaitRequestDto: IgnoreWaitRequestDto
}

/**
 * Request parameters for syncPlaySetNewQueue operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySetNewQueueRequest
 */
export interface SyncPlayApiSyncPlaySetNewQueueRequest {
    /**
     * The new playlist to play in the group.
     * @type {PlayRequestDto}
     * @memberof SyncPlayApiSyncPlaySetNewQueue
     */
    readonly playRequestDto: PlayRequestDto
}

/**
 * Request parameters for syncPlaySetPlaylistItem operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySetPlaylistItemRequest
 */
export interface SyncPlayApiSyncPlaySetPlaylistItemRequest {
    /**
     * The new item to play.
     * @type {SetPlaylistItemRequestDto}
     * @memberof SyncPlayApiSyncPlaySetPlaylistItem
     */
    readonly setPlaylistItemRequestDto: SetPlaylistItemRequestDto
}

/**
 * Request parameters for syncPlaySetRepeatMode operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySetRepeatModeRequest
 */
export interface SyncPlayApiSyncPlaySetRepeatModeRequest {
    /**
     * The new repeat mode.
     * @type {SetRepeatModeRequestDto}
     * @memberof SyncPlayApiSyncPlaySetRepeatMode
     */
    readonly setRepeatModeRequestDto: SetRepeatModeRequestDto
}

/**
 * Request parameters for syncPlaySetShuffleMode operation in SyncPlayApi.
 * @export
 * @interface SyncPlayApiSyncPlaySetShuffleModeRequest
 */
export interface SyncPlayApiSyncPlaySetShuffleModeRequest {
    /**
     * The new shuffle mode.
     * @type {SetShuffleModeRequestDto}
     * @memberof SyncPlayApiSyncPlaySetShuffleMode
     */
    readonly setShuffleModeRequestDto: SetShuffleModeRequestDto
}

/**
 * SyncPlayApi - object-oriented interface
 * @export
 * @class SyncPlayApi
 * @extends {BaseAPI}
 */
export class SyncPlayApi extends BaseAPI {
    /**
     * 
     * @summary Notify SyncPlay group that member is buffering.
     * @param {SyncPlayApiSyncPlayBufferingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayBuffering(requestParameters: SyncPlayApiSyncPlayBufferingRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayBuffering(requestParameters.bufferRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new SyncPlay group.
     * @param {SyncPlayApiSyncPlayCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayCreateGroup(requestParameters: SyncPlayApiSyncPlayCreateGroupRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayCreateGroup(requestParameters.newGroupRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a SyncPlay group by id.
     * @param {SyncPlayApiSyncPlayGetGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayGetGroup(requestParameters: SyncPlayApiSyncPlayGetGroupRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayGetGroup(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all SyncPlay groups.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayGetGroups(options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayGetGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join an existing SyncPlay group.
     * @param {SyncPlayApiSyncPlayJoinGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayJoinGroup(requestParameters: SyncPlayApiSyncPlayJoinGroupRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayJoinGroup(requestParameters.joinGroupRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave the joined SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayLeaveGroup(options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayLeaveGroup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to move an item in the playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlayMovePlaylistItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayMovePlaylistItem(requestParameters: SyncPlayApiSyncPlayMovePlaylistItemRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayMovePlaylistItem(requestParameters.movePlaylistItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request next item in SyncPlay group.
     * @param {SyncPlayApiSyncPlayNextItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayNextItem(requestParameters: SyncPlayApiSyncPlayNextItemRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayNextItem(requestParameters.nextItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request pause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPause(options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayPause(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update session ping.
     * @param {SyncPlayApiSyncPlayPingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPing(requestParameters: SyncPlayApiSyncPlayPingRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayPing(requestParameters.pingRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request previous item in SyncPlay group.
     * @param {SyncPlayApiSyncPlayPreviousItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPreviousItem(requestParameters: SyncPlayApiSyncPlayPreviousItemRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayPreviousItem(requestParameters.previousItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to queue items to the playlist of a SyncPlay group.
     * @param {SyncPlayApiSyncPlayQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayQueue(requestParameters: SyncPlayApiSyncPlayQueueRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayQueue(requestParameters.queueRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify SyncPlay group that member is ready for playback.
     * @param {SyncPlayApiSyncPlayReadyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayReady(requestParameters: SyncPlayApiSyncPlayReadyRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayReady(requestParameters.readyRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to remove items from the playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlayRemoveFromPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayRemoveFromPlaylist(requestParameters: SyncPlayApiSyncPlayRemoveFromPlaylistRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayRemoveFromPlaylist(requestParameters.removeFromPlaylistRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request seek in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySeekRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySeek(requestParameters: SyncPlayApiSyncPlaySeekRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySeek(requestParameters.seekRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request SyncPlay group to ignore member during group-wait.
     * @param {SyncPlayApiSyncPlaySetIgnoreWaitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetIgnoreWait(requestParameters: SyncPlayApiSyncPlaySetIgnoreWaitRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySetIgnoreWait(requestParameters.ignoreWaitRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set new playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetNewQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetNewQueue(requestParameters: SyncPlayApiSyncPlaySetNewQueueRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySetNewQueue(requestParameters.playRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to change playlist item in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetPlaylistItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetPlaylistItem(requestParameters: SyncPlayApiSyncPlaySetPlaylistItemRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySetPlaylistItem(requestParameters.setPlaylistItemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set repeat mode in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetRepeatModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetRepeatMode(requestParameters: SyncPlayApiSyncPlaySetRepeatModeRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySetRepeatMode(requestParameters.setRepeatModeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set shuffle mode in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetShuffleModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetShuffleMode(requestParameters: SyncPlayApiSyncPlaySetShuffleModeRequest, options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlaySetShuffleMode(requestParameters.setShuffleModeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request stop in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayStop(options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayStop(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request unpause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayUnpause(options?: RawAxiosRequestConfig) {
        return SyncPlayApiFp(this.configuration).syncPlayUnpause(options).then((request) => request(this.axios, this.basePath));
    }
}

