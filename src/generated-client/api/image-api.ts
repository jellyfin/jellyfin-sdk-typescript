/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 *
 * Jellyfin API
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ImageFormat } from '../models';
// @ts-ignore
import { ImageInfo } from '../models';
// @ts-ignore
import { ImageType } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a custom splashscreen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomSplashscreen: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Branding/Splashscreen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImage: async (itemId: string, imageType: ImageType, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteItemImage', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('deleteItemImage', 'imageType', imageType)
            const localVarPath = `/Items/{itemId}/Images/{imageType}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImageByIndex: async (itemId: string, imageType: ImageType, imageIndex: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteItemImageByIndex', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('deleteItemImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('deleteItemImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImage: async (userId: string, imageType: ImageType, index?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserImage', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('deleteUserImage', 'imageType', imageType)
            const localVarPath = `/Users/{userId}/Images/{imageType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImageByIndex: async (userId: string, imageType: ImageType, index: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserImageByIndex', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('deleteUserImageByIndex', 'imageType', imageType)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('deleteUserImageByIndex', 'index', index)
            const localVarPath = `/Users/{userId}/Images/{imageType}/{index}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistImage: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getArtistImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getArtistImage', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getArtistImage', 'imageIndex', imageIndex)
            const localVarPath = `/Artists/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getGenreImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getGenreImage', 'imageType', imageType)
            const localVarPath = `/Genres/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getGenreImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getGenreImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getGenreImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Genres/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage: async (itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemImage', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getItemImage', 'imageType', imageType)
            const localVarPath = `/Items/{itemId}/Images/{imageType}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage2: async (itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemImage2', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getItemImage2', 'imageType', imageType)
            // verify required parameter 'maxWidth' is not null or undefined
            assertParamExists('getItemImage2', 'maxWidth', maxWidth)
            // verify required parameter 'maxHeight' is not null or undefined
            assertParamExists('getItemImage2', 'maxHeight', maxHeight)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('getItemImage2', 'tag', tag)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('getItemImage2', 'format', format)
            // verify required parameter 'percentPlayed' is not null or undefined
            assertParamExists('getItemImage2', 'percentPlayed', percentPlayed)
            // verify required parameter 'unplayedCount' is not null or undefined
            assertParamExists('getItemImage2', 'unplayedCount', unplayedCount)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getItemImage2', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"maxWidth"}}`, encodeURIComponent(String(maxWidth)))
                .replace(`{${"maxHeight"}}`, encodeURIComponent(String(maxHeight)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"percentPlayed"}}`, encodeURIComponent(String(percentPlayed)))
                .replace(`{${"unplayedCount"}}`, encodeURIComponent(String(unplayedCount)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageByIndex: async (itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemImageByIndex', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getItemImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getItemImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageInfos: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemImageInfos', 'itemId', itemId)
            const localVarPath = `/Items/{itemId}/Images`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getMusicGenreImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getMusicGenreImage', 'imageType', imageType)
            const localVarPath = `/MusicGenres/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getMusicGenreImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getMusicGenreImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getMusicGenreImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/MusicGenres/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPersonImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getPersonImage', 'imageType', imageType)
            const localVarPath = `/Persons/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPersonImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getPersonImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getPersonImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Persons/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates or gets the splashscreen.
         * @param {string} [tag] Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {number} [blur] Blur image.
         * @param {string} [backgroundColor] Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Apply a foreground layer on top of the image.
         * @param {number} [quality] Quality setting, from 0-100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSplashscreen: async (tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, width?: number, height?: number, fillWidth?: number, fillHeight?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, quality?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Branding/Splashscreen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getStudioImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getStudioImage', 'imageType', imageType)
            const localVarPath = `/Studios/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getStudioImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getStudioImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getStudioImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Studios/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImage: async (userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserImage', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getUserImage', 'imageType', imageType)
            const localVarPath = `/Users/{userId}/Images/{imageType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImageByIndex: async (userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserImageByIndex', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('getUserImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('getUserImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Users/{userId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headArtistImage: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headArtistImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headArtistImage', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headArtistImage', 'imageIndex', imageIndex)
            const localVarPath = `/Artists/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headGenreImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headGenreImage', 'imageType', imageType)
            const localVarPath = `/Genres/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headGenreImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headGenreImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headGenreImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Genres/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage: async (itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('headItemImage', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headItemImage', 'imageType', imageType)
            const localVarPath = `/Items/{itemId}/Images/{imageType}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage2: async (itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('headItemImage2', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headItemImage2', 'imageType', imageType)
            // verify required parameter 'maxWidth' is not null or undefined
            assertParamExists('headItemImage2', 'maxWidth', maxWidth)
            // verify required parameter 'maxHeight' is not null or undefined
            assertParamExists('headItemImage2', 'maxHeight', maxHeight)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('headItemImage2', 'tag', tag)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('headItemImage2', 'format', format)
            // verify required parameter 'percentPlayed' is not null or undefined
            assertParamExists('headItemImage2', 'percentPlayed', percentPlayed)
            // verify required parameter 'unplayedCount' is not null or undefined
            assertParamExists('headItemImage2', 'unplayedCount', unplayedCount)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headItemImage2', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"maxWidth"}}`, encodeURIComponent(String(maxWidth)))
                .replace(`{${"maxHeight"}}`, encodeURIComponent(String(maxHeight)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"percentPlayed"}}`, encodeURIComponent(String(percentPlayed)))
                .replace(`{${"unplayedCount"}}`, encodeURIComponent(String(unplayedCount)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImageByIndex: async (itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('headItemImageByIndex', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headItemImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headItemImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headMusicGenreImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headMusicGenreImage', 'imageType', imageType)
            const localVarPath = `/MusicGenres/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headMusicGenreImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headMusicGenreImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headMusicGenreImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/MusicGenres/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headPersonImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headPersonImage', 'imageType', imageType)
            const localVarPath = `/Persons/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headPersonImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headPersonImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headPersonImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Persons/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImage: async (name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headStudioImage', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headStudioImage', 'imageType', imageType)
            const localVarPath = `/Studios/{name}/Images/{imageType}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImageByIndex: async (name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('headStudioImageByIndex', 'name', name)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headStudioImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headStudioImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Studios/{name}/Images/{imageType}/{imageIndex}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImage: async (userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('headUserImage', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headUserImage', 'imageType', imageType)
            const localVarPath = `/Users/{userId}/Images/{imageType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }

            if (imageIndex !== undefined) {
                localVarQueryParameter['imageIndex'] = imageIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImageByIndex: async (userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('headUserImageByIndex', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('headUserImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('headUserImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Users/{userId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (percentPlayed !== undefined) {
                localVarQueryParameter['percentPlayed'] = percentPlayed;
            }

            if (unplayedCount !== undefined) {
                localVarQueryParameter['unplayedCount'] = unplayedCount;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (fillWidth !== undefined) {
                localVarQueryParameter['fillWidth'] = fillWidth;
            }

            if (fillHeight !== undefined) {
                localVarQueryParameter['fillHeight'] = fillHeight;
            }

            if (cropWhitespace !== undefined) {
                localVarQueryParameter['cropWhitespace'] = cropWhitespace;
            }

            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }

            if (backgroundColor !== undefined) {
                localVarQueryParameter['backgroundColor'] = backgroundColor;
            }

            if (foregroundLayer !== undefined) {
                localVarQueryParameter['foregroundLayer'] = foregroundLayer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImage: async (userId: string, imageType: ImageType, index?: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('postUserImage', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('postUserImage', 'imageType', imageType)
            const localVarPath = `/Users/{userId}/Images/{imageType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImageByIndex: async (userId: string, imageType: ImageType, index: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('postUserImageByIndex', 'userId', userId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('postUserImageByIndex', 'imageType', imageType)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('postUserImageByIndex', 'index', index)
            const localVarPath = `/Users/{userId}/Images/{imageType}/{index}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImage: async (itemId: string, imageType: ImageType, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('setItemImage', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('setItemImage', 'imageType', imageType)
            const localVarPath = `/Items/{itemId}/Images/{imageType}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImageByIndex: async (itemId: string, imageType: ImageType, imageIndex: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('setItemImageByIndex', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('setItemImageByIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('setItemImageByIndex', 'imageIndex', imageIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemImageIndex: async (itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateItemImageIndex', 'itemId', itemId)
            // verify required parameter 'imageType' is not null or undefined
            assertParamExists('updateItemImageIndex', 'imageType', imageType)
            // verify required parameter 'imageIndex' is not null or undefined
            assertParamExists('updateItemImageIndex', 'imageIndex', imageIndex)
            // verify required parameter 'newIndex' is not null or undefined
            assertParamExists('updateItemImageIndex', 'newIndex', newIndex)
            const localVarPath = `/Items/{itemId}/Images/{imageType}/{imageIndex}/Index`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"imageType"}}`, encodeURIComponent(String(imageType)))
                .replace(`{${"imageIndex"}}`, encodeURIComponent(String(imageIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (newIndex !== undefined) {
                localVarQueryParameter['newIndex'] = newIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomSplashscreen: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Branding/Splashscreen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a custom splashscreen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomSplashscreen(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomSplashscreen(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemImage(itemId, imageType, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemImageByIndex(itemId, imageType, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserImage(userId: string, imageType: ImageType, index?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserImage(userId, imageType, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserImageByIndex(userId, imageType, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemImageInfos(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemImageInfos(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generates or gets the splashscreen.
         * @param {string} [tag] Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {number} [blur] Blur image.
         * @param {string} [backgroundColor] Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Apply a foreground layer on top of the image.
         * @param {number} [quality] Quality setting, from 0-100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSplashscreen(tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, width?: number, height?: number, fillWidth?: number, fillHeight?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, quality?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSplashscreen(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserImage(userId: string, imageType: ImageType, index?: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserImage(userId, imageType, index, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserImageByIndex(userId, imageType, index, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setItemImage(itemId: string, imageType: ImageType, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setItemImage(itemId, imageType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setItemImageByIndex(itemId, imageType, imageIndex, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemImageIndex(itemId, imageType, imageIndex, newIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCustomSplashscreen(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCustomSplashscreen(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a custom splashscreen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomSplashscreen(options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustomSplashscreen(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImage(itemId: string, imageType: ImageType, imageIndex?: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemImage(itemId, imageType, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemImageByIndex(itemId, imageType, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImage(userId: string, imageType: ImageType, index?: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserImage(userId, imageType, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImageByIndex(userId: string, imageType: ImageType, index: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserImageByIndex(userId, imageType, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageInfos(itemId: string, options?: any): AxiosPromise<Array<ImageInfo>> {
            return localVarFp.getItemImageInfos(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generates or gets the splashscreen.
         * @param {string} [tag] Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {number} [blur] Blur image.
         * @param {string} [backgroundColor] Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Apply a foreground layer on top of the image.
         * @param {number} [quality] Quality setting, from 0-100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSplashscreen(tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, width?: number, height?: number, fillWidth?: number, fillHeight?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, quality?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getSplashscreen(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headArtistImage(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage(itemId: string, imageType: ImageType, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage2(itemId: string, imageType: ImageType, maxWidth: number, maxHeight: number, tag: string, format: ImageFormat, percentPlayed: number, unplayedCount: number, imageIndex: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, maxWidth?: number, maxHeight?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, tag?: string, cropWhitespace?: boolean, format?: ImageFormat, percentPlayed?: number, unplayedCount?: number, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImage(name: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImageByIndex(name: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImage(userId: string, imageType: ImageType, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, imageIndex?: number, options?: any): AxiosPromise<any> {
            return localVarFp.headUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, imageIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImageByIndex(userId: string, imageType: ImageType, imageIndex: number, tag?: string, format?: ImageFormat, maxWidth?: number, maxHeight?: number, percentPlayed?: number, unplayedCount?: number, width?: number, height?: number, quality?: number, fillWidth?: number, fillHeight?: number, cropWhitespace?: boolean, blur?: number, backgroundColor?: string, foregroundLayer?: string, options?: any): AxiosPromise<any> {
            return localVarFp.headUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, blur, backgroundColor, foregroundLayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImage(userId: string, imageType: ImageType, index?: number, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.postUserImage(userId, imageType, index, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImageByIndex(userId: string, imageType: ImageType, index: number, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.postUserImageByIndex(userId, imageType, index, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImage(itemId: string, imageType: ImageType, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.setItemImage(itemId, imageType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImageByIndex(itemId: string, imageType: ImageType, imageIndex: number, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.setItemImageByIndex(itemId, imageType, imageIndex, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemImageIndex(itemId: string, imageType: ImageType, imageIndex: number, newIndex: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateItemImageIndex(itemId, imageType, imageIndex, newIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomSplashscreen(body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.uploadCustomSplashscreen(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteItemImage operation in ImageApi.
 * @export
 * @interface ImageApiDeleteItemImageRequest
 */
export interface ImageApiDeleteItemImageRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiDeleteItemImage
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiDeleteItemImage
     */
    readonly imageType: ImageType

    /**
     * The image index.
     * @type {number}
     * @memberof ImageApiDeleteItemImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for deleteItemImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiDeleteItemImageByIndexRequest
 */
export interface ImageApiDeleteItemImageByIndexRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiDeleteItemImageByIndex
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiDeleteItemImageByIndex
     */
    readonly imageType: ImageType

    /**
     * The image index.
     * @type {number}
     * @memberof ImageApiDeleteItemImageByIndex
     */
    readonly imageIndex: number
}

/**
 * Request parameters for deleteUserImage operation in ImageApi.
 * @export
 * @interface ImageApiDeleteUserImageRequest
 */
export interface ImageApiDeleteUserImageRequest {
    /**
     * User Id.
     * @type {string}
     * @memberof ImageApiDeleteUserImage
     */
    readonly userId: string

    /**
     * (Unused) Image type.
     * @type {ImageType}
     * @memberof ImageApiDeleteUserImage
     */
    readonly imageType: ImageType

    /**
     * (Unused) Image index.
     * @type {number}
     * @memberof ImageApiDeleteUserImage
     */
    readonly index?: number
}

/**
 * Request parameters for deleteUserImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiDeleteUserImageByIndexRequest
 */
export interface ImageApiDeleteUserImageByIndexRequest {
    /**
     * User Id.
     * @type {string}
     * @memberof ImageApiDeleteUserImageByIndex
     */
    readonly userId: string

    /**
     * (Unused) Image type.
     * @type {ImageType}
     * @memberof ImageApiDeleteUserImageByIndex
     */
    readonly imageType: ImageType

    /**
     * (Unused) Image index.
     * @type {number}
     * @memberof ImageApiDeleteUserImageByIndex
     */
    readonly index: number
}

/**
 * Request parameters for getArtistImage operation in ImageApi.
 * @export
 * @interface ImageApiGetArtistImageRequest
 */
export interface ImageApiGetArtistImageRequest {
    /**
     * Artist name.
     * @type {string}
     * @memberof ImageApiGetArtistImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetArtistImage
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetArtistImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetArtistImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetArtistImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetArtistImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetArtistImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetArtistImage
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getGenreImage operation in ImageApi.
 * @export
 * @interface ImageApiGetGenreImageRequest
 */
export interface ImageApiGetGenreImageRequest {
    /**
     * Genre name.
     * @type {string}
     * @memberof ImageApiGetGenreImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetGenreImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetGenreImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetGenreImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetGenreImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetGenreImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetGenreImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetGenreImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getGenreImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetGenreImageByIndexRequest
 */
export interface ImageApiGetGenreImageByIndexRequest {
    /**
     * Genre name.
     * @type {string}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetGenreImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getItemImage operation in ImageApi.
 * @export
 * @interface ImageApiGetItemImageRequest
 */
export interface ImageApiGetItemImageRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiGetItemImage
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetItemImage
     */
    readonly imageType: ImageType

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly maxHeight?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetItemImage
     */
    readonly tag?: string

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetItemImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @type {ImageFormat}
     * @memberof ImageApiGetItemImage
     */
    readonly format?: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly unplayedCount?: number

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetItemImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetItemImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetItemImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getItemImage2 operation in ImageApi.
 * @export
 * @interface ImageApiGetItemImage2Request
 */
export interface ImageApiGetItemImage2Request {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiGetItemImage2
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetItemImage2
     */
    readonly imageType: ImageType

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly maxWidth: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly maxHeight: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetItemImage2
     */
    readonly tag: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetItemImage2
     */
    readonly format: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly percentPlayed: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly unplayedCount: number

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly imageIndex: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetItemImage2
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetItemImage2
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetItemImage2
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetItemImage2
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getItemImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetItemImageByIndexRequest
 */
export interface ImageApiGetItemImageByIndexRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly imageIndex: number

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly maxHeight?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly tag?: string

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @type {ImageFormat}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetItemImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getItemImageInfos operation in ImageApi.
 * @export
 * @interface ImageApiGetItemImageInfosRequest
 */
export interface ImageApiGetItemImageInfosRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiGetItemImageInfos
     */
    readonly itemId: string
}

/**
 * Request parameters for getMusicGenreImage operation in ImageApi.
 * @export
 * @interface ImageApiGetMusicGenreImageRequest
 */
export interface ImageApiGetMusicGenreImageRequest {
    /**
     * Music genre name.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getMusicGenreImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetMusicGenreImageByIndexRequest
 */
export interface ImageApiGetMusicGenreImageByIndexRequest {
    /**
     * Music genre name.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetMusicGenreImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getPersonImage operation in ImageApi.
 * @export
 * @interface ImageApiGetPersonImageRequest
 */
export interface ImageApiGetPersonImageRequest {
    /**
     * Person name.
     * @type {string}
     * @memberof ImageApiGetPersonImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetPersonImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetPersonImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetPersonImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetPersonImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetPersonImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetPersonImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetPersonImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getPersonImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetPersonImageByIndexRequest
 */
export interface ImageApiGetPersonImageByIndexRequest {
    /**
     * Person name.
     * @type {string}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetPersonImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getSplashscreen operation in ImageApi.
 * @export
 * @interface ImageApiGetSplashscreenRequest
 */
export interface ImageApiGetSplashscreenRequest {
    /**
     * Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetSplashscreen
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetSplashscreen
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly maxHeight?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly height?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly fillHeight?: number

    /**
     * Blur image.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly blur?: number

    /**
     * Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetSplashscreen
     */
    readonly backgroundColor?: string

    /**
     * Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetSplashscreen
     */
    readonly foregroundLayer?: string

    /**
     * Quality setting, from 0-100.
     * @type {number}
     * @memberof ImageApiGetSplashscreen
     */
    readonly quality?: number
}

/**
 * Request parameters for getStudioImage operation in ImageApi.
 * @export
 * @interface ImageApiGetStudioImageRequest
 */
export interface ImageApiGetStudioImageRequest {
    /**
     * Studio name.
     * @type {string}
     * @memberof ImageApiGetStudioImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetStudioImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetStudioImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetStudioImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetStudioImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetStudioImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetStudioImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetStudioImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getStudioImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetStudioImageByIndexRequest
 */
export interface ImageApiGetStudioImageByIndexRequest {
    /**
     * Studio name.
     * @type {string}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetStudioImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for getUserImage operation in ImageApi.
 * @export
 * @interface ImageApiGetUserImageRequest
 */
export interface ImageApiGetUserImageRequest {
    /**
     * User id.
     * @type {string}
     * @memberof ImageApiGetUserImage
     */
    readonly userId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetUserImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetUserImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetUserImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetUserImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetUserImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetUserImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetUserImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for getUserImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiGetUserImageByIndexRequest
 */
export interface ImageApiGetUserImageByIndexRequest {
    /**
     * User id.
     * @type {string}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly userId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiGetUserImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headArtistImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadArtistImageRequest
 */
export interface ImageApiHeadArtistImageRequest {
    /**
     * Artist name.
     * @type {string}
     * @memberof ImageApiHeadArtistImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadArtistImage
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadArtistImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadArtistImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadArtistImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadArtistImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadArtistImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadArtistImage
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headGenreImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadGenreImageRequest
 */
export interface ImageApiHeadGenreImageRequest {
    /**
     * Genre name.
     * @type {string}
     * @memberof ImageApiHeadGenreImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadGenreImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadGenreImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadGenreImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadGenreImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadGenreImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadGenreImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadGenreImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headGenreImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadGenreImageByIndexRequest
 */
export interface ImageApiHeadGenreImageByIndexRequest {
    /**
     * Genre name.
     * @type {string}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadGenreImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headItemImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadItemImageRequest
 */
export interface ImageApiHeadItemImageRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiHeadItemImage
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadItemImage
     */
    readonly imageType: ImageType

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly maxHeight?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadItemImage
     */
    readonly tag?: string

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadItemImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @type {ImageFormat}
     * @memberof ImageApiHeadItemImage
     */
    readonly format?: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly unplayedCount?: number

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadItemImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadItemImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadItemImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headItemImage2 operation in ImageApi.
 * @export
 * @interface ImageApiHeadItemImage2Request
 */
export interface ImageApiHeadItemImage2Request {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiHeadItemImage2
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadItemImage2
     */
    readonly imageType: ImageType

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly maxWidth: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly maxHeight: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadItemImage2
     */
    readonly tag: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadItemImage2
     */
    readonly format: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly percentPlayed: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly unplayedCount: number

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly imageIndex: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadItemImage2
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadItemImage2
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadItemImage2
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadItemImage2
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headItemImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadItemImageByIndexRequest
 */
export interface ImageApiHeadItemImageByIndexRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly imageIndex: number

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly maxHeight?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly tag?: string

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @type {ImageFormat}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadItemImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headMusicGenreImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadMusicGenreImageRequest
 */
export interface ImageApiHeadMusicGenreImageRequest {
    /**
     * Music genre name.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headMusicGenreImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadMusicGenreImageByIndexRequest
 */
export interface ImageApiHeadMusicGenreImageByIndexRequest {
    /**
     * Music genre name.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadMusicGenreImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headPersonImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadPersonImageRequest
 */
export interface ImageApiHeadPersonImageRequest {
    /**
     * Person name.
     * @type {string}
     * @memberof ImageApiHeadPersonImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadPersonImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadPersonImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadPersonImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadPersonImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadPersonImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadPersonImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadPersonImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headPersonImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadPersonImageByIndexRequest
 */
export interface ImageApiHeadPersonImageByIndexRequest {
    /**
     * Person name.
     * @type {string}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadPersonImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headStudioImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadStudioImageRequest
 */
export interface ImageApiHeadStudioImageRequest {
    /**
     * Studio name.
     * @type {string}
     * @memberof ImageApiHeadStudioImage
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadStudioImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadStudioImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadStudioImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadStudioImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadStudioImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadStudioImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadStudioImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headStudioImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadStudioImageByIndexRequest
 */
export interface ImageApiHeadStudioImageByIndexRequest {
    /**
     * Studio name.
     * @type {string}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly name: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadStudioImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for headUserImage operation in ImageApi.
 * @export
 * @interface ImageApiHeadUserImageRequest
 */
export interface ImageApiHeadUserImageRequest {
    /**
     * User id.
     * @type {string}
     * @memberof ImageApiHeadUserImage
     */
    readonly userId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadUserImage
     */
    readonly imageType: ImageType

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadUserImage
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadUserImage
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadUserImage
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadUserImage
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadUserImage
     */
    readonly foregroundLayer?: string

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadUserImage
     */
    readonly imageIndex?: number
}

/**
 * Request parameters for headUserImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiHeadUserImageByIndexRequest
 */
export interface ImageApiHeadUserImageByIndexRequest {
    /**
     * User id.
     * @type {string}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly userId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly imageType: ImageType

    /**
     * Image index.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly imageIndex: number

    /**
     * Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @type {string}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly tag?: string

    /**
     * Determines the output format of the image - original,gif,jpg,png.
     * @type {ImageFormat}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly format?: ImageFormat

    /**
     * The maximum image width to return.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly maxWidth?: number

    /**
     * The maximum image height to return.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly maxHeight?: number

    /**
     * Optional. Percent to render for the percent played overlay.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly percentPlayed?: number

    /**
     * Optional. Unplayed count overlay to render.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly unplayedCount?: number

    /**
     * The fixed image width to return.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly width?: number

    /**
     * The fixed image height to return.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly height?: number

    /**
     * Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly quality?: number

    /**
     * Width of box to fill.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly fillWidth?: number

    /**
     * Height of box to fill.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly fillHeight?: number

    /**
     * Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @type {boolean}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly cropWhitespace?: boolean

    /**
     * Optional. Blur image.
     * @type {number}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly blur?: number

    /**
     * Optional. Apply a background color for transparent images.
     * @type {string}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly backgroundColor?: string

    /**
     * Optional. Apply a foreground layer on top of the image.
     * @type {string}
     * @memberof ImageApiHeadUserImageByIndex
     */
    readonly foregroundLayer?: string
}

/**
 * Request parameters for postUserImage operation in ImageApi.
 * @export
 * @interface ImageApiPostUserImageRequest
 */
export interface ImageApiPostUserImageRequest {
    /**
     * User Id.
     * @type {string}
     * @memberof ImageApiPostUserImage
     */
    readonly userId: string

    /**
     * (Unused) Image type.
     * @type {ImageType}
     * @memberof ImageApiPostUserImage
     */
    readonly imageType: ImageType

    /**
     * (Unused) Image index.
     * @type {number}
     * @memberof ImageApiPostUserImage
     */
    readonly index?: number

    /**
     * 
     * @type {any}
     * @memberof ImageApiPostUserImage
     */
    readonly body?: any
}

/**
 * Request parameters for postUserImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiPostUserImageByIndexRequest
 */
export interface ImageApiPostUserImageByIndexRequest {
    /**
     * User Id.
     * @type {string}
     * @memberof ImageApiPostUserImageByIndex
     */
    readonly userId: string

    /**
     * (Unused) Image type.
     * @type {ImageType}
     * @memberof ImageApiPostUserImageByIndex
     */
    readonly imageType: ImageType

    /**
     * (Unused) Image index.
     * @type {number}
     * @memberof ImageApiPostUserImageByIndex
     */
    readonly index: number

    /**
     * 
     * @type {any}
     * @memberof ImageApiPostUserImageByIndex
     */
    readonly body?: any
}

/**
 * Request parameters for setItemImage operation in ImageApi.
 * @export
 * @interface ImageApiSetItemImageRequest
 */
export interface ImageApiSetItemImageRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiSetItemImage
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiSetItemImage
     */
    readonly imageType: ImageType

    /**
     * 
     * @type {any}
     * @memberof ImageApiSetItemImage
     */
    readonly body?: any
}

/**
 * Request parameters for setItemImageByIndex operation in ImageApi.
 * @export
 * @interface ImageApiSetItemImageByIndexRequest
 */
export interface ImageApiSetItemImageByIndexRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiSetItemImageByIndex
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiSetItemImageByIndex
     */
    readonly imageType: ImageType

    /**
     * (Unused) Image index.
     * @type {number}
     * @memberof ImageApiSetItemImageByIndex
     */
    readonly imageIndex: number

    /**
     * 
     * @type {any}
     * @memberof ImageApiSetItemImageByIndex
     */
    readonly body?: any
}

/**
 * Request parameters for updateItemImageIndex operation in ImageApi.
 * @export
 * @interface ImageApiUpdateItemImageIndexRequest
 */
export interface ImageApiUpdateItemImageIndexRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof ImageApiUpdateItemImageIndex
     */
    readonly itemId: string

    /**
     * Image type.
     * @type {ImageType}
     * @memberof ImageApiUpdateItemImageIndex
     */
    readonly imageType: ImageType

    /**
     * Old image index.
     * @type {number}
     * @memberof ImageApiUpdateItemImageIndex
     */
    readonly imageIndex: number

    /**
     * New image index.
     * @type {number}
     * @memberof ImageApiUpdateItemImageIndex
     */
    readonly newIndex: number
}

/**
 * Request parameters for uploadCustomSplashscreen operation in ImageApi.
 * @export
 * @interface ImageApiUploadCustomSplashscreenRequest
 */
export interface ImageApiUploadCustomSplashscreenRequest {
    /**
     * 
     * @type {any}
     * @memberof ImageApiUploadCustomSplashscreen
     */
    readonly body?: any
}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @summary Delete a custom splashscreen.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public deleteCustomSplashscreen(options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).deleteCustomSplashscreen(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an item\'s image.
     * @param {ImageApiDeleteItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public deleteItemImage(requestParameters: ImageApiDeleteItemImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).deleteItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an item\'s image.
     * @param {ImageApiDeleteItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public deleteItemImageByIndex(requestParameters: ImageApiDeleteItemImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).deleteItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the user\'s image.
     * @param {ImageApiDeleteUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public deleteUserImage(requestParameters: ImageApiDeleteUserImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).deleteUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the user\'s image.
     * @param {ImageApiDeleteUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public deleteUserImageByIndex(requestParameters: ImageApiDeleteUserImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).deleteUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get artist image by name.
     * @param {ImageApiGetArtistImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getArtistImage(requestParameters: ImageApiGetArtistImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getArtistImage(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get genre image by name.
     * @param {ImageApiGetGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getGenreImage(requestParameters: ImageApiGetGenreImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get genre image by name.
     * @param {ImageApiGetGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getGenreImageByIndex(requestParameters: ImageApiGetGenreImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getItemImage(requestParameters: ImageApiGetItemImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImage2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getItemImage2(requestParameters: ImageApiGetItemImage2Request, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getItemImage2(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.tag, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.imageIndex, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getItemImageByIndex(requestParameters: ImageApiGetItemImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get item image infos.
     * @param {ImageApiGetItemImageInfosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getItemImageInfos(requestParameters: ImageApiGetItemImageInfosRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getItemImageInfos(requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get music genre image by name.
     * @param {ImageApiGetMusicGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getMusicGenreImage(requestParameters: ImageApiGetMusicGenreImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getMusicGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get music genre image by name.
     * @param {ImageApiGetMusicGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getMusicGenreImageByIndex(requestParameters: ImageApiGetMusicGenreImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getMusicGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by name.
     * @param {ImageApiGetPersonImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getPersonImage(requestParameters: ImageApiGetPersonImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getPersonImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by name.
     * @param {ImageApiGetPersonImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getPersonImageByIndex(requestParameters: ImageApiGetPersonImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getPersonImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generates or gets the splashscreen.
     * @param {ImageApiGetSplashscreenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getSplashscreen(requestParameters: ImageApiGetSplashscreenRequest = {}, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getSplashscreen(requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.quality, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get studio image by name.
     * @param {ImageApiGetStudioImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getStudioImage(requestParameters: ImageApiGetStudioImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getStudioImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get studio image by name.
     * @param {ImageApiGetStudioImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getStudioImageByIndex(requestParameters: ImageApiGetStudioImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getStudioImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile image.
     * @param {ImageApiGetUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getUserImage(requestParameters: ImageApiGetUserImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile image.
     * @param {ImageApiGetUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getUserImageByIndex(requestParameters: ImageApiGetUserImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get artist image by name.
     * @param {ImageApiHeadArtistImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headArtistImage(requestParameters: ImageApiHeadArtistImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headArtistImage(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get genre image by name.
     * @param {ImageApiHeadGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headGenreImage(requestParameters: ImageApiHeadGenreImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get genre image by name.
     * @param {ImageApiHeadGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headGenreImageByIndex(requestParameters: ImageApiHeadGenreImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headItemImage(requestParameters: ImageApiHeadItemImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImage2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headItemImage2(requestParameters: ImageApiHeadItemImage2Request, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headItemImage2(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.tag, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.imageIndex, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headItemImageByIndex(requestParameters: ImageApiHeadItemImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get music genre image by name.
     * @param {ImageApiHeadMusicGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headMusicGenreImage(requestParameters: ImageApiHeadMusicGenreImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headMusicGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get music genre image by name.
     * @param {ImageApiHeadMusicGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headMusicGenreImageByIndex(requestParameters: ImageApiHeadMusicGenreImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headMusicGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by name.
     * @param {ImageApiHeadPersonImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headPersonImage(requestParameters: ImageApiHeadPersonImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headPersonImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by name.
     * @param {ImageApiHeadPersonImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headPersonImageByIndex(requestParameters: ImageApiHeadPersonImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headPersonImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get studio image by name.
     * @param {ImageApiHeadStudioImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headStudioImage(requestParameters: ImageApiHeadStudioImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headStudioImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get studio image by name.
     * @param {ImageApiHeadStudioImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headStudioImageByIndex(requestParameters: ImageApiHeadStudioImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headStudioImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile image.
     * @param {ImageApiHeadUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headUserImage(requestParameters: ImageApiHeadUserImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile image.
     * @param {ImageApiHeadUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public headUserImageByIndex(requestParameters: ImageApiHeadUserImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).headUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the user image.
     * @param {ImageApiPostUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public postUserImage(requestParameters: ImageApiPostUserImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).postUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.index, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the user image.
     * @param {ImageApiPostUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public postUserImageByIndex(requestParameters: ImageApiPostUserImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).postUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.index, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set item image.
     * @param {ImageApiSetItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public setItemImage(requestParameters: ImageApiSetItemImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).setItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set item image.
     * @param {ImageApiSetItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public setItemImageByIndex(requestParameters: ImageApiSetItemImageByIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).setItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the index for an item image.
     * @param {ImageApiUpdateItemImageIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public updateItemImageIndex(requestParameters: ImageApiUpdateItemImageIndexRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).updateItemImageIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.newIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
     * @param {ImageApiUploadCustomSplashscreenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public uploadCustomSplashscreen(requestParameters: ImageApiUploadCustomSplashscreenRequest = {}, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).uploadCustomSplashscreen(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
